--- 
AWSTemplateFormatVersion: 2010-09-09
Description: "Creates an nginx web server"

Parameters:
  VPCId:
    Description: A VPC ID, such as vpc-a123baa3.
    Type: AWS::EC2::VPC::Id
  PublicSubnet:
    Description: A subnet ID, such as subnet-123a351e.
    Type: AWS::EC2::Subnet::Id
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - c1.medium
      - c1.xlarge
      - cc1.4xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
    Default: dockerKeyPair
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[-_ a-zA-Z0-9]*'
    ConstraintDescription: 'Can contain only alphanumeric characters, spaces, dashes and underscores.'

Resources:
  NginxServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /home/ubuntu/prescriptive/files/index.html:
              content: !Sub |
                <!DOCTYPE html>
                <html>
                <head>
                <title>Static File</title>
                <style>
                body {width: 35em;margin: 0 auto;font-family: Tahoma, Verdana, Arial, sans-serif;}
                </style>
                </head>
                <body>
                <h1>Static File</h1>
                <p>IP addresses are</p>
                <p>{{iplist}}</p>
                <p><em>end of table and node1</em></p>
                </body>
                </html>
              mode: '000444'
              owner: ubuntu
              group: ubuntu
            /home/ubuntu/prescriptive/files/nginx.conf:
              content: !Sub |
                # run nginx in foreground
                daemon off;

                #user  nobody;
                worker_processes  1;

                #error_log  logs/error.log;
                error_log stderr notice;
                #error_log  logs/error.log  info;

                #pid        logs/nginx.pid;


                events {
                    worker_connections  1024;
                }


                http {
                    include       mime.types;
                    default_type  application/octet-stream;

                    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    #                  '$status $body_bytes_sent "$http_referer" '
                    #                  '"$http_user_agent" "$http_x_forwarded_for"';

                    access_log /dev/stdout;

                    sendfile        on;
                    #tcp_nopush     on;

                    #keepalive_timeout  0;
                    keepalive_timeout  65;

                    #gzip  on;

                    upstream loadbalance {
                      least_conn;
                      server 3.128.189.148:80;
                      server 18.188.99.36:80;
                    }

                    server {
                        listen       80;
                        server_name  localhost;

                        #charset koi8-r;

                        #access_log  logs/host.access.log  main;

                        location / {
                            proxy_pass http://loadbalance;
                            #root   html;
                            #index  index.html index.htm;
                        }

                        #error_page  404              /404.html;

                        # redirect server error pages to the static page /50x.html
                        #
                        error_page   500 502 503 504  /50x.html;
                        location = /50x.html {
                            root   html;
                        }

                        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
                        #
                        #location ~ \.php$ {
                        #    proxy_pass   http://127.0.0.1;
                                #}

                        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
                        #
                        #location ~ \.php$ {
                        #    root           html;
                        #    fastcgi_pass   127.0.0.1:9000;
                        #    fastcgi_index  index.php;
                        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
                        #    include        fastcgi_params;
                        #}

                        # deny access to .htaccess files, if Apache's document root
                        # concurs with nginx's one
                        #
                        #location ~ /\.ht {
                        #    deny  all;
                        #}
                    }


                    # another virtual host using mix of IP-, name-, and port-based configuration
                    #
                    #server {
                    #    listen       8000;
                    #    listen       somename:8080;
                    #    server_name  somename  alias  another.alias;

                    #    location / {
                    #        root   html;
                    #        index  index.html index.htm;
                    #    }
                    #}


                    # HTTPS server
                    #
                    #server {
                    #    listen       443 ssl;
                    #    server_name  localhost;

                    #    ssl_certificate      cert.pem;
                    #    ssl_certificate_key  cert.key;

                    #    ssl_session_cache    shared:SSL:1m;
                    #    ssl_session_timeout  5m;

                    #    ssl_ciphers  HIGH:!aNULL:!MD5;
                    #    ssl_prefer_server_ciphers  on;

                    #    location / {
                    #        root   html;
                    #        index  index.html index.htm;
                    #    }
                    #}

                }
              mode: '000444'
              owner: ubuntu
              group: ubuntu

            /home/ubuntu/prescriptive/scripts/update_ips.py:
              content: !Sub |
                import os
                import subprocess
                from subprocess import PIPE
                from shutil import copyfile

                filefolder="../files/"
                pemfolder="~/"
                completed = subprocess.run(["sudo", "docker", "node", "ls"],stdout=PIPE)
                #CompletedProcess(args=["sudo docker node ls"])
                table = completed.stdout.decode("utf-8")
                lines = table.split("\n")
                iplist = ""
                for line in lines:
                    if "Leader" in line:
                        continue
                    cols = line.split()
                    for col in cols:
                        if col.startswith('ip'):
                            iplist+=col+" "

                print(iplist)

                copyfile(filefolder+"index.html","index.html")

                subprocess.run(["sed", "-i", "s/{{iplist}}/"+iplist+"/g", "index.html"])

                iplist = iplist.strip().split(" ")
                for ip in iplist:
                    ip = ip.replace("ip-","").replace("-",".")
                    subprocess.run(["scp", "-i", pemfolder+"dockerKeyPair.pem", "index.html", "ubuntu@"+ip+":~/prescriptive/files/index.html"])

                os.remove("index.html")
              mode: '000444'
              owner: ubuntu
              group: ubuntu
    
    Properties:
      ImageId: ami-0bbe28eb2173f6167
      InstanceType:
        Ref: InstanceType
      Tenancy: default
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          GroupSet:
            - !Ref PrescriptiveSecurityGroup
          SubnetId: !Ref PublicSubnet
          DeviceIndex: '0'
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            apt-get update
            apt-get -y install python-pip
            pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup

            /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource NginxServer --region ${AWS::Region}

            apt-get -y install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common

            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

            add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"

            apt-get -y install docker-ce docker-ce-cli containerd.io

            mkdir -p prescriptive/files
            cd prescriptive

            docker pull rjmdocker/rjmrepo:1.0
            docker run -d -p 80:80 -v /home/ubuntu/prescriptive/files/:/etc/nginx/html -v /home/ubuntu/prescriptive/files/nginx.conf:/etc/nginx/nginx.conf rjmdocker/rjmrepo:1.0
  
  PrescriptiveSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "prescriptive-sg"
      GroupDescription: Enable HTTP access via port 80, and SSH access
      VpcId: !Ref VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2376'
        ToPort: '2377'
        CidrIp: 0.0.0.0/0

Outputs:
  URL:
    Description: URL of the website
    Value: !Join 
      - ''
      - - 'http://ApplicationLoadBalancer/DNSName'